package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate jp;
    private DbIterator dbItor1;
    private DbIterator dbItor2;
    private TupleDesc combined;
    transient private Tuple t1 = null;
    transient private Tuple t2 = null;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.jp = p;
        this.dbItor1 = child1;
        this.dbItor2 = child2;
        this.combined = TupleDesc.merge(dbItor1.getTupleDesc(), dbItor2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.jp;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return combined;
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
	    return this.dbItor1.getTupleDesc().getFieldName(this.jp.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        return this.dbItor2.getTupleDesc().getFieldName(this.jp.getField2());
    }
    // I was not sure why my code isn't working and I searched online. I found that I must have this loadMap()
    // method in order to have this hash equi join working.
    HashMap<Object, ArrayList<Tuple>> map = new HashMap<Object, ArrayList<Tuple>>();
    public final static int MAP_SIZE = 20000;

    private boolean loadMap() throws DbException, TransactionAbortedException {
        int cnt = 0;
        map.clear();
        while (dbItor1.hasNext()) {
            t1 = dbItor1.next();
            ArrayList<Tuple> list = map.get(t1.getField(jp.getField1()));
            if (list == null) {
                list = new ArrayList<Tuple>();
                map.put(t1.getField(jp.getField1()), list);
            }
            list.add(t1);
            if (cnt++ == MAP_SIZE)
                return true;
        }
        return cnt > 0;

    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        this.dbItor1.open();
        this.dbItor2.open();
        loadMap();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        this.dbItor1.close();
        this.dbItor2.close();
        this.map.clear();
        this.t1 = null;
        this.t2 = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        this.dbItor1.rewind();
        this.dbItor2.rewind();
    }

    transient Iterator<Tuple> listIt = null;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    private Tuple processList() throws TransactionAbortedException, DbException{
        t1 = listIt.next();

        int t1NumFields = t1.getTupleDesc().numFields();
        int t2NumFields = t2.getTupleDesc().numFields();

        // iterate to set fields in combined tuple
        Tuple t = new Tuple(combined);
        for (int i = 0; i < t1NumFields; i++)
            t.setField(i, t1.getField(i));
        for (int i = 0; i < t2NumFields; i++)
            t.setField(t1NumFields + i, t2.getField(i));
        return t;
    }

    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (listIt != null && listIt.hasNext()) {
            // if we are able to find element in the listit iterator, we just have to
            // from listit
            return processList();
        }

        // else, we have to loop around child2 to find the next tuple to be fetched
        // if the case is matched, we create a new combined tuple and fill it with the values
        while (dbItor2.hasNext()) {
            t2 = dbItor2.next();

            ArrayList<Tuple> l = map.get(t2.getField(jp.getField2()));
            if (l == null)
                continue;
            listIt = l.iterator();

            return processList();

        }

        dbItor2.rewind();
        if (loadMap()) {
            return fetchNext();
        }

        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[] {this.dbItor1,this.dbItor2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.dbItor1 = children[0];
        this.dbItor2 = children[1];
    }
    
}
